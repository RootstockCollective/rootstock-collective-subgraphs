type BackerStakingHistory @entity(immutable: false) {
  id: Bytes!
  backerTotalAllocation: BigInt!
  accumulatedTime: BigInt!
  lastBlockNumber: BigInt!
  lastBlockTimestamp: BigInt!
  gauges: [GaugeStakingHistory!]! @derivedFrom(field: "backer")
}

type GaugeStakingHistory @entity(immutable: false) {
  id: Bytes!
  gauge: Bytes! # address
  backer: BackerStakingHistory!
  allocation: BigInt!
  accumulatedAllocationsTime: BigInt!
  lastBlockNumber: BigInt!
  lastBlockTimestamp: BigInt!
}

type Builder @entity(immutable: false) {
  id: Bytes!
  gauge: Bytes!
  backerRewardPercentage: BackerRewardPercentage! @derivedFrom(field: "builder")
  rewardReceiver: Bytes!
  state: BuilderState! @derivedFrom(field: "builder")
  isHalted: Boolean!
  lastCycleRewards: BigInt!
  totalAllocation: BigInt!
  rewardShares: BigInt!
  proposals: [Proposal!]! @derivedFrom(field: "builder")
  rewardsClaimed: [BuilderRewardsClaimed!]! @derivedFrom(field: "builder")
}

type BuilderState @entity(immutable: false) {
  id: Bytes!
  builder: Builder!
  initialized: Boolean!
  kycApproved: Boolean!
  communityApproved: Boolean!
  kycPaused: Boolean!
  selfPaused: Boolean!
  pausedReason: Bytes!
}

type BackerRewardPercentage @entity(immutable: false) { 
  id: Bytes!
  builder: Builder!
  previous: BigInt!
  next: BigInt!
  cooldownEndTime: BigInt!
}

type GaugeToBuilder @entity(immutable: true) { 
  id: Bytes!
  builder: Bytes!
}

type BuilderRewardsClaimed @entity(immutable: false) {
  id: Bytes!
  token: Bytes!
  amount: BigInt!
  builder: Builder! 
}

type Proposal @entity(immutable: false) {
  id: Bytes!
  description: String!
  link: String!
  status: String!
  proposalType: String!
  builder: Builder!
}

type Backer @entity(immutable: false) {
  id: Bytes!
  isBlacklisted: Boolean!
  totalAllocation: BigInt!
  builders: [BackerToBuilder!] @derivedFrom(field: "backer")
  rewardsClaimed: [BackersRewardsClaimed!] @derivedFrom(field: "backer")
}

type BackersRewardsClaimed @entity(immutable: false) {
  id: Bytes!
  token: Bytes!
  amount: BigInt!
  backer: Backer! 
}

type BackerToBuilder @entity(immutable: false) {
  id: Bytes!
  totalAllocation: BigInt!
  backer: Backer!
  builder: Builder!
  builderState: BuilderState!
  rewardsClaimed: [BackerToBuilderRewardsClaimed!] @derivedFrom(field: "backerToBuilder")
}

type BackerToBuilderRewardsClaimed @entity(immutable: false) {
  id: Bytes!
  token: Bytes!
  amount: BigInt!
  backerToBuilder: BackerToBuilder! 
}

type Cycle @entity(immutable: false) {
  id: Bytes!
  onDistributionPeriod: Boolean!
  currentCycleDuration: BigInt!
  previousCycleDuration: BigInt!
  distributionDuration: BigInt!
  previousCycleStart: BigInt!
  currentCycleStart: BigInt!
  rewardPerToken: [CycleRewardPerToken!] @derivedFrom(field: "cycle")
}

type CycleRewardPerToken @entity(immutable: false) { 
  id: Bytes!
  token: Bytes!
  amount: BigInt!
  cycle: Cycle!
}

type ContractConfig @entity(immutable: false) {
  id: Bytes!
  backersManager: Bytes!
  builderRegistry: Bytes!
  rewardDistributor: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  blockHash: Bytes!
}

type BlockChangeLog @entity(immutable: false) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  updatedEntities: [String!]! 
}

type GlobalMetric @entity(immutable: false) { 
  id: Bytes!
  builders: [Bytes!]!
  totalAllocation: BigInt!
  totalPotentialReward: BigInt!
  defaultDistributionPerToken: [GlobalDistributionPerToken!] @derivedFrom(field: "globalMetric")
}

type GlobalDistributionPerToken @entity(immutable: false) {  
  id: Bytes!
  token: Bytes!
  amount: BigInt!
  globalMetric: GlobalMetric!
}

type DailyAllocation @entity(immutable: false) { 
  id: Bytes!
  day: Int!
  totalAllocation: BigInt!
}
